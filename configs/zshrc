# Set complete path
export PATH="./bin:$HOME/.local/bin:$HOME/.local/share/omakub/bin:$PATH"
set +h

export OMAKUB_PATH="/home/$USER/.local/share/omakub"

autoload -U compinit && compinit

# Preferred editor for local and remote sessions
if [[ -n $SSH_CONNECTION ]]; then
    export EDITOR='vim'
else
    export EDITOR='nvim'
fi

# Editor used by CLI
export SUDO_EDITOR="$EDITOR"
export VISUAL="nvim"
export REACT_EDITOR='webstorm'

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# ssh
export SSH_KEY_PATH="$HOME/.ssh/rsa_id"

# Enable tmux session when ssh
# function ssh () {/usr/bin/ssh -t $@ "tmux attach || tmux new";}

export TERM="xterm-256color"
export LC_ALL=en_US.UTF-8

# Path to your oh-my-zsh installation.
export ZSH=$HOME/.oh-my-zsh

# oh-my-zsh plugins
# Add wisely, as too many plugins slow down shell startup.
plugins=(
  git
  alias-tips
  direnv
  artisan
  rails
  zsh-completions
  zsh-autosuggestions
  zsh-syntax-highlighting
)
fpath+=${ZSH_CUSTOM:-${ZSH:-~/.oh-my-zsh}/custom}/plugins/zsh-completions/src
source $ZSH/oh-my-zsh.sh

# Init ohmyposh
# eval "$(oh-my-posh init zsh --config ~/.config/ohmyposh/config.toml)"

# Init starship
eval "$(starship init zsh)"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
alias vim="nvim"

alias ez="vim ~/.zshrc"
alias ev="vim ~/.config/nvim/"
alias et="vim ~/.tmux.conf.local"
alias ep="vim ~/.config/ohmyposh/config.toml"
alias ela="vim ~/.config/alacritty/alacritty.toml"
alias ew="vim ~/.config/wezterm/wezterm.lua"

alias py="python"
alias m="python manage.py"
alias dj="django-admin"
alias pa="artisan"
alias plz="php please"
alias pest="./vendor/bin/pest"
alias ci="composer install"
alias c="composer"
alias dump="composer dump-autoload"

alias rr="rustrover"
alias cr="cargo run"

unalias  gg 2> /dev/null
alias gg="lazygit"

# File system
alias ls="eza -lah --git --group-directories-first --icons=always $@"
alias lsa='ls -a'
alias lt='eza --tree --level=2 --long --icons --git'
alias lta='lt -a'
alias ff="fzf --preview 'batcat --style=numbers --color=always {}'"
alias fd='fdfind'

# Directories
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'

# Tools
alias n='nvim'
alias g='git'
alias d='docker'
alias r='rails'
alias bat='batcat'
alias lzg='lazygit'
alias lzd='lazydocker'

# Git
alias gcm='git commit -m'
alias gcam='git commit -a -m'
alias gcad='git commit -a --amend'

# Compression
compress() { tar -czf "${1%/}.tar.gz" "${1%/}"; }
alias decompress="tar -xzf"

# Convert webm files generated by the Gnome screenshot video recorder to mp4s that are more compatible
webm2mp4() {
  input_file="$1"
  output_file="${input_file%.webm}.mp4"
  ffmpeg -i "$input_file" -c:v libx264 -preset slow -crf 22 -c:a aac -b:a 192k "$output_file"
}

# Listening on PORT
listening() {
  if [ $# -eq 0 ]; then
    sudo lsof -iTCP -sTCP:LISTEN -n -P
  elif [ $# -eq 1 ]; then
    sudo lsof -iTCP -sTCP:LISTEN -n -P | grep -i --color $1
  else
    echo "Usage: listening [pattern]"
  fi
}

# Convert image to ico
img2ico () {
  local i="${1}" o="${2:-${1:r}.ico}" s="${png2ico_size:-256}"
  convert -resize x${s} -gravity center -crop ${s}x${s}+0+0 "$i" -flatten -colors 256 -background transparent "$o"
}

# get public IP
myip() {
  curl -s ipinfo.io | jq -r .ip
}

# Clear docker dangling images
dcleanup() {
  docker rm -v $(docker ps --filter status=exited -q 2>/dev/null) 2>/dev/null
  docker rmi $(docker images --filter dangling=true -q 2>/dev/null) 2>/dev/null
}

# just for fun
bipboop() {
  for i in {100..1000..100}; do ffplay -f lavfi -i "sine=frequency=${i}:duration=0.1" -autoexit -nodisp -loglevel quiet; done
}

# Init various applications

if command -v mise &> /dev/null; then
  eval "$(mise activate zsh)"
fi

if command -v zoxide &> /dev/null; then
  eval "$(zoxide init zsh)"
fi

if command -v fzf &> /dev/null; then
  source /usr/share/doc/fzf/examples/key-bindings.zsh

  # fzf settings https://medium.com/better-programming/boost-your-command-line-productivity-with-fuzzy-finder-985aa162ba5d
  [ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
  # fzf's command
  export FZF_DEFAULT_COMMAND="fd --hidden --follow --exclude '.git' --exclude 'node_modules'"
  # CTRL-T's command
  export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
  # ALT-C's command
  export FZF_ALT_C_COMMAND="$FZF_DEFAULT_COMMAND --type d"

  # for more info see fzf/shell/completion.zsh
  _fzf_compgen_path() {
    fd . "$1"
  }
  _fzf_compgen_dir() {
    fd --type d . "$1"
  }

  export FZF_DEFAULT_OPTS="
  --layout=reverse
  --info=inline
  --height=80%
  --multi
  --preview-window=:hidden
  --preview '([[ -f {} ]] && (bat --style=numbers --color=always {} || cat {})) || ([[ -d {} ]] && (lsd --tree {} | less)) || echo {} 2> /dev/null | head -200'
  --color='hl:148,hl+:154,pointer:032,marker:010,bg+:237,gutter:008'
  --prompt='∼ ' --pointer='▶' --marker='✓'
  --bind '?:toggle-preview'
  --bind 'ctrl-a:select-all'
  --bind 'ctrl-y:execute-silent(echo {+} | pbcopy)'
  --bind 'ctrl-e:execute(echo {+} | xargs -o vim)'
  --bind 'ctrl-v:execute(code {+})'
  "
  bindkey "ALT-C" fzf-cd-widget

  # find-in-file - usage: fif <SEARCH_TERM>
  fif() {
    if [ ! "$#" -gt 0 ]; then
      echo "Need a string to search for!";
      return 1;
    fi

    rg --files-with-matches --no-messages "$1" | fzf $FZF_PREVIEW_WINDOW --preview "rg --ignore-case --pretty --context 10 '$1' {}"
  }
fi

# Yazi filemanager
if command -v yazi &> /dev/null; then
  function y() {
    local tmp="$(mktemp -t "yazi-cwd.XXXXXX")"
    yazi "$@" --cwd-file="$tmp"
    if cwd="$(cat -- "$tmp")" && [ -n "$cwd" ] && [ "$cwd" != "$PWD" ]; then
      builtin cd -- "$cwd"
    fi
    rm -f -- "$tmp"
  }
fi

# Go init
if command -v go &> /dev/null; then
  export PATH=$PATH:/usr/local/go/bin
  export GOPATH=$HOME/go
  export PATH=$PATH:$GOROOT/bin:$GOPATH/bin
fi

# Composer global package init
if command -v composer &> /dev/null; then
  export PATH=$PATH:$HOME/.composer/vendor/bin
fi

# Init Rust cargo
if command -v cargo &> /dev/null; then
  export PATH="$PATH:$HOME/.cargo/bin"
fi

# call onefetch if we navigate to a new coderepo
if command -v onefetch &> /dev/null; then
  LAST_REPO=""
  cd() {
    z "$@";
    git rev-parse 2>/dev/null;

    if [ $? -eq 0 ]; then
      if [ "$LAST_REPO" != $(basename $(git rev-parse --show-toplevel)) ]; then
        onefetch
        LAST_REPO=$(basename $(git rev-parse --show-toplevel))
      fi
    fi
  }
fi

# direnv init hook
if command -v direnv &> /dev/null; then
  eval "$(direnv hook zsh)"
fi
